<?php

/**
 * @file
 * Module shows last posts.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 * @return string
 *   String
 */
function current_posts_help($path, $arg) {
  switch ($path) {
    case "admin/help#current_posts":
      return '' . t("Displays links to nodes created on this date. This is my first test module!!:)") . '';
      break;

  }
}

/**
 * Implements hook_block_info().
 */
function current_posts_block_info() {
  $blocks['current_posts'] = [
    // The name that will appear in the block list.
    'info' => t('Current posts'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  ];
  return $blocks;
}

/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *   A result set of the targeted posts.
 */
function current_posts_contents($display) {
  // $display argument is new.
  // Get today's date.
  $today = getdate();
  // Calculate midnight a week ago.
  $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 30), $today['year']);
  // Get all posts from one week ago to the present.
  $end_time = time();

  $max_num = variable_get('current_posts_max', 3);

  // Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', ['nid', 'title', 'created'])
    ->condition('status', 1)
    // Published.
    ->condition('created', [$start_time, $end_time], 'BETWEEN')
    ->orderBy('created', 'DESC');
  // Most recent first. Query paused here.

  if ($display == 'block') {
    // Restrict the range if called with 'block' argument.
    $query->range(0, $max_num);
  }
  // Now proceeds to execute().
  // If called by page, query proceeds directly to execute().

  return $query->execute();
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 * @param string $delta
 * @return mixed
 */
function current_posts_block_view($delta = '') {
  switch ($delta) {
    case 'current_posts':
      $block['subject'] = t('Current posts');
      if (user_access('access content')) {
        // Use our custom function to retrieve data.
        $result = current_posts_contents('block');
        // Array to contain items for the block to render.
        $items = [];
        // Iterate over the result set and format as links.
        foreach ($result as $node) {
          $items[] = [
            'data' => l($node->title, 'node/' . $node->nid) . t('<br>') .
              format_date($node->created, 'custom', 'h:i, D, j.m.Y')
          ];
        }
        // No content in the last week.
        if (empty($items)) {
          $block['content'] = t('No posts available.');
        }
        else {
          // Pass data through theme function.
          $block['content']['posts'] = [
            '#theme' => 'item_list__current_posts__block',
            '#items' => $items,
          ];
          // Add a link to the page for more entries.
          $block['content']['more'] = [
            '#theme' => 'more_link__current_posts',
            '#url' => 'current_posts',
            '#title' => t('See the full list of current posts.'),
          ];

        }
      }
      return $block;
  }
}

/**
 * Implements hook_menu().
 */
function current_posts_menu() {
  $items = [];

  $items['admin/config/content/current_posts'] = [
    'title' => 'Current posts',
    'description' => 'Configuration for Current posts module. You can write any sort of description you want in here!',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['current_posts_form'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_CALLBACK,
  ];

  $items['current_posts'] = [
    'title' => 'Current posts',
    'page callback' => '_current_posts_page',
    'access arguments' => ['access current_posts content'],
    'type' => MENU_CALLBACK,
    // Will appear in Navigation menu.
  ];

  return $items;
}

/**
 * Page callback: Current posts settings.
 *
 * @see current_posts_menu()
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function current_posts_form ($form, $form_state) {
  $form['current_posts_max'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('current_posts_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
  ];
  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function current_posts_form_validate($form, $form_state) {
  $max_num = $form_state['values']['current_posts_max'];
  if (!is_numeric($max_num)) {
    form_set_error('current_posts_max', t('You must enter a number for the maximum number of posts to display.'));
  }
  elseif ($max_num <= 0) {
    form_set_error('current_posts_max', t('Maximum number of posts to display must be positive.'));
  }
}

/**
 * Implements hook_permission().
 */
function current_posts_permission() {
  return [
    'access current_posts content' => [
      'title' => t('Access content for the Current posts module'),
    ],
  ];
}

/**
 * Custom page callback function, declared in current_posts_menu().
 */
function _current_posts_page() {
  drupal_set_title('Current posts');
  $result = current_posts_contents('page');
  // Array to contain items for the page to render.
  $items = [];
  // Iterate over the result set and format as links.
  foreach ($result as $node) {
    $items[] = [
      'data' => l($node->title, 'node/' . $node->nid),
    ];
  }

  // No content in the last week
  if (empty($items)) {
    $page_array['current_posts_arguments'] = [
      // Title serves as page subtitle
      '#title' => t('All posts from the last week'),
      '#markup' => t('No posts available.'),
    ];
    return $page_array;
  }
  else {
    $page_array['current_posts_arguments'] = [
      '#title' => t('All posts from the last week'),
      '#items' => $items,

      // Theme hook suggestion.
      '#theme' => 'item_list__current_posts',
    ];
    return $page_array;
  }
}
